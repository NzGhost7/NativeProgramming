import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

open class SmartDevice(val name:String, val category:String) {
    var deviceStatus = "online"
    	protected set(value) {
            field = value
        }	
    
    open val deviceType = "unknown"
    
    open fun turnOn() {
        deviceStatus = "on"
    }
    open fun turnOff() {
        deviceStatus = "off"
    }
    
    open fun printDeviceInfo() {
        println("Device name: $name, category: $category, type: $deviceType")
    }
}

class SmartTvDevice(deviceName: String, deviceCategory: String) : 
    SmartDevice(name = deviceName, category = deviceCategory) {
        
        override val deviceType = "Smart TV"
        
        private var speakerVolume by RangeRegulator(initialValue = 2, minValue = 0, maxValue = 100)
		private var channelNumber by RangeRegulator(initialValue = 1, minValue = 0, maxValue = 200)
        
		fun increaseSpeakerVolume() {
            speakerVolume++
            println("Speaker volume increased to $speakerVolume")
        }
        fun decreaseSpeakerVolume() {
            speakerVolume--
            println("Speaker volume decreased to $speakerVolume")
        }
        fun nextChannel() {
            channelNumber++
            println("Channel number increase to $channelNumber")
        }
        fun previousChannel() {
            channelNumber--
            println("Channel number decrease to $channelNumber")
        }
        override fun turnOn() {
            super.turnOn()
        println(
            "$name is turned on. Speaker volume is set to $speakerVolume and channel number is " +
                "set to $channelNumber."
        )

        }
        override fun turnOff() {
            super.turnOff()
            println("$name turned off")
        }
    }
    
class SmartLightDevice(deviceName: String, deviceCategory: String):
SmartDevice(name = deviceName, category = deviceCategory) {
    
    override val deviceType = "Smart Light"
    
    private var brightnessLevel by RangeRegulator(initialValue = 0, minValue = 0, maxValue = 100)
    
	fun increasedBrightness() {
        brightnessLevel++
        println("Brightness increased to $brightnessLevel")
    }
    fun decreasedBrightness() {
        brightnessLevel--
        println("Brightness decreased to $brightnessLevel")
    }
    override fun turnOn() {
        super.turnOn()
        brightnessLevel = 2
        println("$name turned on. The brightness level is $brightnessLevel.")
    }
    override fun turnOff() {
        super.turnOff()
        brightnessLevel = 0
        println("Smart Light turned off")
    }
}

class SmartHome(
    val smartTvDevice: SmartTvDevice,
    val smartLightDevice: SmartLightDevice
) {
    var deviceTurnOnCount = 0
        private set
    
    fun printSmartTvInfo() {
        smartTvDevice.printDeviceInfo()
    }

    fun printSmartLightInfo() {
        smartLightDevice.printDeviceInfo()
    }

    fun turnOnTv() {
        if (smartTvDevice.deviceStatus == "on") {
            deviceTurnOnCount++
            smartTvDevice.turnOn()
        }
    }

    fun turnOffTv() {
        if (smartTvDevice.deviceStatus == "on") {
            deviceTurnOnCount--
            smartTvDevice.turnOff()
        }
    }

    fun increasedTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.increaseSpeakerVolume()
        }
    }
    fun decreasedTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.decreaseSpeakerVolume()
        }
    }

    fun changeTvChannelToNext() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.nextChannel()
        }
    }
    fun changeTvChannelToPrevious() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.previousChannel()
        }
    }
    
    fun turnOnLight() {
        if (smartLightDevice.deviceStatus == "on") {
            deviceTurnOnCount++
            smartLightDevice.turnOn()
        }
    }

    fun turnOffLight() {
        if (smartLightDevice.deviceStatus == "on") {
            deviceTurnOnCount--
            smartLightDevice.turnOff()
        }
    }

    fun turnOffAllDevice() {
        turnOffTv()
        turnOffLight()
    }
}


class RangeRegulator(
	initialValue: Int,
	private val minValue: Int,
	private val maxValue: Int
) : ReadWriteProperty<Any?, Int> {
    var fieldData = initialValue
    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return fieldData
    }
    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        if (value in minValue..maxValue) {
            fieldData = value
        }
    }
}

fun main() {
    var smartDevice: SmartDevice = SmartTvDevice("Android TV", "Entertainment")
    smartDevice.turnOn()
    (smartDevice as? SmartTvDevice)?.increaseSpeakerVolume() // Testing volume increase
    (smartDevice as? SmartTvDevice)?.printDeviceInfo() // Testing printSmartTvInfo
    (smartDevice as? SmartTvDevice)?.decreaseSpeakerVolume() // Testing volume decrease
    (smartDevice as? SmartTvDevice)?.nextChannel() // Testing channel change
    (smartDevice as? SmartTvDevice)?.printDeviceInfo() // Testing printSmartTvInfo
    (smartDevice as? SmartTvDevice)?.previousChannel() // Testing channel change
    (smartDevice as? SmartTvDevice)?.printDeviceInfo() // Testing printSmartTvInfo
    (smartDevice as? SmartTvDevice)?.turnOff()

    smartDevice = SmartLightDevice("Google Light", "Utility")
    smartDevice.turnOn()
    (smartDevice as? SmartLightDevice)?.increasedBrightness() // Testing brightness increase
    (smartDevice as? SmartLightDevice)?.printDeviceInfo() // Testing printSmartLightInfo
    (smartDevice as? SmartLightDevice)?.decreasedBrightness() // Testing brightness decrease
    (smartDevice as? SmartLightDevice)?.printDeviceInfo() // Testing printSmartLightInfo
    (smartDevice as? SmartLightDevice)?.turnOff()
}